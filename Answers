G Roques
3.8 Exercise: Process Chains

1. n = 1 | i:1 process ID:4456 parent ID:3561 child ID:0
   --------------------------------------------------------
   n = 2 | i:1 process ID:4460 parent ID:3561 child ID:4461
         | i:2 process ID:4461 parent ID:4460 child ID:0
   --------------------------------------------------------
   n = 3 | i:1 process ID:4468 parent ID:3561 child ID:4469
         | i:2 process ID:4469 parent ID:4468 child ID:4470
         | i:3 process ID:4470 parent ID:4469 child ID:0
   ---------------------------------------------------------

2. 4253
    ||
   4524
    ||
   4525
    ||
   4526

3. The program can generate a large number of processes.
   However parent processes terminate before child processes fairly frequently, roughly every 3 to 4 processes.
	 The orphaned child process is then adopted by init, causing roughly one fourth of the processes to have a parent id of 1.

4. I observed the same behavior, but the print statements were delayed for 10 seconds.

5. Sleeping for 1 second or greater allows all the child processes to terminate before the parent processes.
   I observed none of the processes had a parent id of 1 with sleep greater than or equal to 1.
   Increasing k has the effect of producing k print statements for n processes and sleeping for k * m seconds.
   Since increasing k increases m when m is greater than zero, it has the affect of ensure child processes terminate before parent processes.
   Interestingly, if you set k to a large number like 5, and m to 0, then 5 print statements for each process is produced and roughly one fourth are again adopted by init.

6. No processes are adopted by init, even with sleep set to zero, because we explicity wait for each child process to terminate.
   It reverses the output of the program by printing out the last iteration first, second-to-last, and so on.

7. The program seems to run like it did with the combined print statement.
   You can still tell which processes generated each part of the output.
